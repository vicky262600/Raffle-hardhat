import { Provider, Signer } from 'zksync-ethers';
import { TransactionRequest, TransactionResponse } from 'zksync-ethers/build/types';
import { ethers } from 'ethers';
import { HardhatZksyncProvider } from './hardhat-zksync-provider';
export declare class HardhatZksyncSigner extends Signer {
    private accountWallet?;
    static from(signer: ethers.providers.JsonRpcSigner & {
        provider: HardhatZksyncProvider;
    }, zksyncProvider?: Provider | HardhatZksyncProvider): HardhatZksyncSigner;
    sendTransaction(transaction: TransactionRequest): Promise<TransactionResponse>;
    signMessage(message: string | Uint8Array): Promise<string>;
    _signTypedData(domain: ethers.TypedDataDomain, types: Record<string, ethers.TypedDataField[]>, value: Record<string, any>): Promise<string>;
    signTransaction(transaction: TransactionRequest): Promise<string>;
    private _sendTransaction;
    private _prepareTransaction;
    private static _getProperSigner;
}
//# sourceMappingURL=hardhat-zksync-signer.d.ts.map